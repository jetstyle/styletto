#!/usr/bin/env node

// dependencies

var path   = require('path');
var fs     = require('fs');

var settings = require('../lib/settings');
var styletto = require('../lib/styletto').init;

// preparsing of terminal arguments

var stringOfArgv = process.argv.slice(0);

stringOfArgv.splice(0, 2);

var noArgv = (stringOfArgv.length === 0)

if (noArgv) ShowHelp();

for (var i = 0; i < stringOfArgv.length; i++) {

    var helpMarker = ((stringOfArgv[i].indexOf('--help') != "-1") || (/^-.*h.*/.test(stringOfArgv[i])));

    if (helpMarker) ShowHelp();

    var versionMarker = ((stringOfArgv[i].indexOf('--version') != "-1") || (/^-.*v.*/.test(stringOfArgv[i])));

    if (versionMarker) ShowVersion();

}

function ShowHelp() {

    var helpMsg  = '\nUsage: styletto [options] inputFile [outputFile]\n';
        helpMsg += '\nOptions:\n';
        helpMsg += '\n-h, --help                Displays help information';
        helpMsg += '\n-v, --varsion             Displays package version';
        helpMsg += '\n-c, --compress[=engine]   Compress output file using either "csso"';
        helpMsg += '\n                          or "yui" compressor';
        helpMsg += '\n-b, --base64[=size]       Encode images to base64, images that are more';
        helpMsg += '\n                          than "size" value in bytes will not be enoded,';
        helpMsg += '\n                          default size is 10000 bytes';

    console.log(helpMsg);

    process.exit();

}

function ShowVersion() {

    packagePath = path.join(process.argv[1], '../../package.json');

    var packageFile = JSON.parse(fs.readFileSync(packagePath));

    console.log(packageFile.name + ' version ' + packageFile.version);

    process.exit();

}

// arguments parsing and error hadling

var config = settings(stringOfArgv);

if ( config instanceof Error ) {

    console.error('\n' + config);

    process.exit();

};


// initialising main module with params

styletto(config[0], config[1], function(err, result) {

    if (err) {

        console.error('\n' + err);

        process.exit();

    } else if (result) {

        process.stdout.write(result);

    } else {

        console.log("\nIt's saved!");

        process.exit();

    }

});
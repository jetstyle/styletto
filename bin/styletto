#!/usr/bin/env node

"use strict";

// config

var packageJson = JSON.parse( require( 'fs' ).readFileSync( __dirname + '/../package.json', 'utf8' ) );

var APPLICATION_NAME    = packageJson.name;
var APPLICATION_VERSION = packageJson.version;


// dependencies

var path     = require( 'path' );
var fs       = require( 'fs' );
var colors   = require( 'colors' );
var optimist = require( 'optimist' );

var settings = require( '../lib/settings' );
var styletto = require( '../lib/styletto' ).init;


// message functions

var showHelp = function() {

    var helpMsg  = '\nUsage: ' + APPLICATION_NAME + ' ';
        helpMsg += '[options]'.blue + ' inputFile [outputFile]';
        helpMsg += '\n\nOptions:\n\n';
        helpMsg += '  -h, --help'.blue + '                ';
        helpMsg += 'displays help information\n';
        helpMsg += '  -v, --version'.blue + '             ';
        helpMsg += 'displays package version\n';
        helpMsg += '  -c, --compress[=engine]'.blue + '   ';
        helpMsg += 'compress output file using either ' + 'csso'.blue;
        helpMsg += '\n                            ';
        helpMsg += 'or ' + 'yui'.blue + ' compressor, default is ';
        helpMsg += 'csso'.blue + '\n';
        helpMsg += '  -b, --base64[=size]'.blue + '       ';
        helpMsg += 'encode images to base64, images that are more';
        helpMsg += '\n                            ';
        helpMsg += 'than "size" value in bytes will not be enoded,';
        helpMsg += '\n                            ';
        helpMsg += 'default size is ' + '10000'.blue + ' bytes\n';

    console.log( helpMsg );

    process.exit();

};

var showVersion = function() {

    console.log( APPLICATION_NAME + ' ' + APPLICATION_VERSION );

    process.exit();

};


// arguments parsing

var args = optimist.options( {

    help: {
        alias: 'h',
        boolean: true
    },

    version: {
        alias: 'v',
        boolean: true
    },

    compress: {
        alias: 'c',
        short: 'c'
    },

    base64: {
        alias: 'b',
        short: 'b'
    }

} ).argv;



// show version

if ( args.version ) {

    showVersion();

}


// show help

var noFileOrShowHelp = ( args._.length === 0 || args.help );

if ( noFileOrShowHelp ) {

    showHelp();

}


// running flags parser

var config = settings( args );

if ( config instanceof Error ) {

    console.error( '\n' + config );

    process.exit();

}


// initialising main module with params

styletto( config[0], config[1], function( err, result ) {

    if ( err ) {

        console.error( '\n' + err );

        process.exit();

    } else if ( result ) {

        process.stdout.write( result );

    } else {

        console.log( '\nIt\'s saved!');

        process.exit();

    }

} );

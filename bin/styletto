#!/usr/bin/env node

"use strict";

// config

var packageJson = JSON.parse( require( 'fs' ).readFileSync( __dirname + '/../package.json', 'utf8' ) );

var APPLICATION_NAME    = packageJson.name;
var APPLICATION_VERSION = packageJson.version;


// dependencies

var path     = require( 'path' );
var fs       = require( 'fs' );
var colors   = require( 'colors' );
var optimist = require( 'optimist' );

var settings = require( '../lib/settings' );
var styletto = require( '../lib/styletto' ).init;


// message functions

var showHelp = function() {

    var helpMsg = [
        '',
        'Usage: ' + APPLICATION_NAME + ' [options]'.blue + ' inputFile [outputFile]\n',
        'Options:\n',
        '  -h, --help'.blue + '                Displays help information',
        '  -v, --version'.blue + '             Displays package version',
        '  -c, --compress[=engine]'.blue + '   Compress output file using either ' + 'csso'.blue,
                  '                            or ' + 'yui'.blue + ' compressor, default ' + 'is csso'.blue,
        '  -b, --base64[=size]'.blue + '       Encode images to base64, images that are more',
                  '                            than "size" value in bytes will not be encoded,',
                  '                            default size is ' + '10000'.blue + ' bytes',
        '  --path[=dir]'.blue + '              Path to directory from which path to includes and',
                  '                            resources in inputFile will be resolved, default is',
                  '                            inputFile directory.\n',
        'Error handling rules: ' + 'error'.blue + ' will exit process without saving, ' + 'alert'.blue + ' will print',
        'error text to console but will also try to finish compiling, ' + 'ignore'.blue + ' will try',
        'to finish compiling without printing an error message.\n',
        '  --includes[=rule]'.blue + '         Default is ' + 'alert'.blue,
        '  --resources[=rule]'.blue + '        Default is ' + 'ignore'.blue,
        '  --processors[=rule]'.blue + '       Default is ' + 'error'.blue + '\n'
    ].join('\n');

    console.log( helpMsg );

    process.exit();

};

var showVersion = function() {

    console.log( APPLICATION_NAME + ' ' + APPLICATION_VERSION );

    process.exit();

};

// arguments parsing

var args = optimist.options( {

    help: {
        alias: 'h',
        boolean: true
    },

    version: {
        alias: 'v',
        boolean: true
    },

    compress: {
        alias: 'c',
        short: 'c'
    },

    base64: {
        alias: 'b',
        short: 'b'
    },

    path: {
        default: false
    },

    errors: {},

    'errors-includes': { },

    'errors-resources': { },

    'errors-processors': { }

} ).argv;

// show version

if ( args.version ) {

    showVersion();

}


// show help

var noFileOrShowHelp = ( args._.length === 0 || args.help );

if ( noFileOrShowHelp ) {

    showHelp();

}


// running flags parser

var config = settings( args );

if ( config instanceof Error ) {

    console.error( '\n' + config );

    process.exit();

}


// initialising main module with params

styletto( config, function( err, success, css ) {

    if ( err ) {

        if ( !success ) {

            console.error( '\nFile was NOT saved because of following errors:\n\n' + err );

        } else if ( !css ) {

            console.error( '\n' + err + '\nFile was saved to "' +config.output + '" with some warnings.\n' );

        }

        else {

            console.error( err );
            process.stdout.write( css );

        }

    }

    else if ( success ) {

        if ( !css ) {

           console.log( '\nFile was succesfully saved to ' + config.output + '\n' );

        }

        else {

            process.stdout.write( css );

        }

    }

    process.exit();

} );

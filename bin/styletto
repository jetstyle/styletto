#!/usr/bin/env node

"use strict";

var packageJson = JSON.parse( require( 'fs' ).readFileSync( __dirname + '/../package.json', 'utf8' ) ),

    APPLICATION_NAME    = packageJson.name,
    APPLICATION_VERSION = packageJson.version,

    fs       = require( 'fs' ),
    path     = require( 'path' ),
    colors   = require( 'colors' ),
    optimist = require( 'optimist' ),

    settings = require( '../lib/settings' ),
    styletto = require( '../lib/styletto' );


// message functions

var showHelp = function() {

    var helpMsg = [
        '',
        'Usage: ' + APPLICATION_NAME + ' [options] inputFile [outputFile]',
        '',
        'Options:',
        '',
        '  -h, --help                Displays help information',
        '  -v, --version             Displays package version',
        '  -c, --compress' + '[=engine]'.yellow + '   Compress output file using either ' + 'csso'.yellow,
        '                            or ' + 'yui'.yellow + ' compressor, default is ' + 'csso'.yellow,
        '  -b, --base64' + '[=size]'.yellow + '       Encode images to base64, images that are more',
        '                            than "size" value in bytes will not be encoded,',
        '                            default size is ' + '10000'.yellow + ' bytes',
        '  -n, --nib                 Use nib mixins if you are using stylus, ',
        '                            default is ' + 'false'.yellow + ', can be ' + 'true'.yellow + ', ' + 'false'.yellow + ' or ' + 'vendor'.yellow,
        '                            vendor will only load vendor prefixes mixin from nib',
        '                            and ignore everything else',
        '  --path[=dir]              Path to directory from which path to inputFile',
        '                            and outputFile will be resolved, default is',
        '                            current directory.',
        '',
        'Error handling rules: ' + 'error'.yellow + ' will exit process without saving, ' + 'alert'.yellow + ' will print',
        'error text to console but will also try to finish compiling, ' + 'ignore'.yellow + ' will try',
        'to finish compiling without printing an error message.',
        '',
        '  --errors' + '[=rule]'.yellow + '                  Shortcut for all rules at once',
        '',
        '  --errors-imports' + '[=rule]'.yellow + '          Default is ' + 'alert'.yellow,
        '  --errors-resources' + '[=rule]'.yellow + '        Default is ' + 'ignore'.yellow,
        '  --errors-processors' + '[=rule]'.yellow + '       Default is ' + 'error'.yellow,
        ''
    ].join('\n');

    console.log( helpMsg );

    process.exit();

};

var showVersion = function() {

    console.log( APPLICATION_NAME + ' ' + APPLICATION_VERSION );

    process.exit();

};

// arguments parsing

var args = optimist.options( {

    help: {

        alias: 'h',
        boolean: true

    },

    version: {

        alias: 'v',
        boolean: true

    },

    c: {

        boolean: true

    },

    b: {

        boolean: true

    },

    n: {

        boolean: true

    },

    compress: {},

    base64: {},

    path: {

        default: false

    },

    nib: {

        default: false

    },

    errors: {},

    'errors-imports': {},

    'errors-resources': {},

    'errors-processors': {}

} ).argv;


// show version

if ( args.version ) {

    showVersion();

}


// show help

var noFileOrShowHelp = ( args._.length === 0 || args.help );

if ( noFileOrShowHelp ) {

    showHelp();

}


// running flags parser

var config = settings( args );

if ( config instanceof Error ) {

    var ERROR_REGEX = /Error:(\s)*/;

    console.error( '\n' + config.toString().replace( ERROR_REGEX, '' ) + '\n' );

    process.exit();

}


// initialising main module with params

styletto( config, function( err, success, css ) {

    if ( err ) {

        if ( !success ) {

            console.error( '\nFile was NOT saved because of following errors:\n\n' + err );

        } else if ( !css ) {

            console.error( '\n' + err + '\nFile was saved to "' +config.output + '" with some warnings.\n' );

        }

        else {

            console.error( err );
            process.stdout.write( css );

        }

    }

    else if ( success ) {

        if ( !css ) {

           console.log( '\nFile was succesfully saved to ' + config.output + '\n' );

        }

        else {

            process.stdout.write( css );

        }

    }

    process.exit();

} );
